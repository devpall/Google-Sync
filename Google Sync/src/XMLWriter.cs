using System.Xml.Linq;
using System;
using Google_Sync.src.Outlook;
using System.Collections.Generic;
using System.Linq;
using System.IO;

namespace Google_Sync.src
{
    class XMLWriter
    {
        private string file = System.Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + @"\Google Sync\Outlook.xml";
        private XDocument XMLDoc;

        public XMLWriter()
        {
            if (!File.Exists(file))
            {
                CreateXML();
            }
        }

        public void CreateXML()
        {
            XMLDoc = new XDocument(
                new XDeclaration("1.0", "UTF-8", "yes"),
                new XComment("Build by Google Outlook sync - do not edit this file"),
                new XElement("Appointments")
                );
            XMLDoc.Save(file);
        }

        public void AddNode(Item item)
        {
            if (!(findItem(item.id)))
            {
                XMLDoc = XDocument.Load(file);
                XElement newNode = new XElement("Appointment",
                    new XAttribute("ID", item.id),
                    new XElement("Subject", item.subject),
                    new XElement("Categorie", item.category),
                    new XElement("Body", item.body),
                    new XElement("Location",item.location),
                    new XElement("AllDay", item.allDayEvent.ToString()),
                    new XElement("StartTime",item.startTime),
                    new XElement("EndTime", item.endTime),
                    new XElement("Recipients",item.group),
                    new XElement("Recurring", 
                        new XAttribute("IS",item.isReturning.ToString()),
                        new XElement ("Intervall",item.intervall.ToString()),
                        new XElement ("Occurences", item.occurences.ToString()),
                        new XElement ("PatternStartDate", item.patternStartDate),
                        new XElement ("NoEndDate", item.noEndDate.ToString()),
                        new XElement ("PatternEndDate", item.patternEndDate)
                                )
                  );

                XMLDoc.Element("Appointments").Add(newNode);           
                XMLDoc.Save(file);
            }
        }

        private bool findItem(string id)
        {
            XMLDoc = XDocument.Load(file);
            XElement appointment = (from xml2 in XMLDoc.Descendants("Appointment") where xml2.Attribute("ID").Value == id select xml2).FirstOrDefault();
            if (appointment == null)
            {
                return false;
            }
            return true;
        }
    }
}
   